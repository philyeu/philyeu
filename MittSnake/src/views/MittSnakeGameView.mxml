<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009"
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:shapes="shapes.*"
		xmlns:mx="library://ns.adobe.com/flex/mx"
		creationComplete="initApp(event)" currentState="{data.name}" title="MittSnakeGameView"
		backgroundColor.MoneyBagsState="#EFEFEF"
		backgroundColor.BinderState="#EFEFEF">
	
	<fx:Script>
		<![CDATA[
			import flash.utils.flash_proxy;
			
			import flashx.textLayout.formats.Float;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.graphics.codec.PNGEncoder;
			
			import spark.core.SpriteVisualElement;
			
			private var direction:String;
			private var previousDirection:String;
			private var speed:Number = 4;
			private var gameOver:Boolean = false;
			private var gameWidth:int;
			private var gameHeight:int;
			private var snake:ArrayCollection = new ArrayCollection();
			private var bodyLocationArray:ArrayCollection = new ArrayCollection();
			private var score:int = 0;
			private var startDelay:uint = 0;
			
			// sound loading vars
			private var req:URLRequest;
			private var context:SoundLoaderContext = new SoundLoaderContext(200);
			private var s:Sound;
			
			
			protected function initApp(event:FlexEvent):void
			{				
				NativeApplication.nativeApplication.addEventListener(Event.DEACTIVATE, onDeactivateApp);
				
				// lock portrait orientation
				this.stage.autoOrients = false;
				this.stage.setOrientation(StageOrientation.DEFAULT);
				this.stage.setAspectRatio(StageAspectRatio.PORTRAIT);
					
				// add event listeners
				this.addEventListener(TransformGestureEvent.GESTURE_SWIPE,handleSwipe);
				this.addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);
				mittFace.addEventListener(Event.ENTER_FRAME, onEnterFrame);
				
				// init snake pit height and width
//				trace("width: " + this.width);
//				trace("height: " + this.height);
//				snakePit.height = this.height - navigation.height - ((this.height - navigation.height) % mittFace.width);
//				snakePit.width = this.width - this.width % mittFace.width;
				
				startDelay = 0;
				
				// constrain height and width of snake pit
				mittFace.x = 0;
				mittFace.y = 0;
				moneyBag.x = 0;
				moneyBag.y = 0;
				var startHeight:uint = snakePit.height;
				var startWidth:uint = snakePit.width;
				snakePit.maxHeight = startHeight;
				snakePit.maxWidth = startWidth;
				
				// set the game height/width
				gameWidth = snakePit.width;
				gameHeight = snakePit.height;

				// do some image optimization for the body part money bags
				moneyBag.cacheAsBitmapMatrix = moneyBag.transform.concatenatedMatrix;
				moneyBag.cacheAsBitmap = true;
				
				mittFace.cacheAsBitmapMatrix = mittFace.transform.concatenatedMatrix;
				mittFace.cacheAsBitmap = true;
				
				bodyPartImg.cacheAsBitmapMatrix = bodyPartImg.transform.concatenatedMatrix;
				bodyPartImg.cacheAsBitmap = true;
			
				// randomly place the mitt face and money bag
				var Low:int = 0;
				var HighY:int = (gameHeight - mittFace.height) / mittFace.width;
				var HighX:int = (gameWidth - mittFace.width) / mittFace.width;
				mittFace.y = Math.floor(Math.random()*(1+HighY-Low)+Low) * mittFace.width;
				mittFace.x = Math.floor(Math.random()*(1+HighX-Low)+Low) * mittFace.width;
				
				do {
					moneyBag.y = Math.floor(Math.random()*(1+HighY-Low)+Low) * mittFace.width;	
				} while (mittFace.y == moneyBag.y)
					
				moneyBag.x = Math.floor(Math.random()*(1+HighX-Low)+Low) * mittFace.width;				
				
				// start in random direction
				var rand:int = Math.floor(Math.random()*(1+4-1)+1);
				switch (rand){
					case 1:
						direction = "up";
						break;
					case 2:
						direction = "right";
						break;
					case 3:
						direction = "down";
						break;
					case 4:
						direction = "left";
						break;
				}
				
				stage.frameRate = speed;
				snake.addItem(mittFace);
				var imageLocArray:ArrayCollection = new ArrayCollection();
				imageLocArray.addItem(5000);
				imageLocArray.addItem(5000);
				bodyLocationArray.addItem(imageLocArray);
			}
			
			protected function onDeactivateApp(event:Event):void
			{
				NativeApplication.nativeApplication.exit();
			}

			protected function onEnterFrame(event:Event):void {
				// wait a few frames before game starts
				if (startDelay < 3) {
					startDelay++;
					return;
				}
				
				// Save location of Mitt's face on enter frame
				var initMittFaceX:uint = mittFace.x;
				var initMittFaceY:uint = mittFace.y;
				
				// Save location of body tail so we know where to add new segments
				var initTailX:uint = getTailX();
				var initTailY:uint = getTailY();
				
				// Collision Flag
				var collision:Boolean = false;
				
				for each (var current:ArrayCollection in bodyLocationArray) {
					var x:Number = current.getItemAt(0) as Number;
					var y:Number = current.getItemAt(1) as Number;
					if(mittFace.x == x && mittFace.y == y) {
						collision = true;
						break;
					}
				}
				
				if(!collision) {
					switch (direction){
						case "up":
							if (mittFace.y - mittFace.height < 0 || (snake.length > 1 && previousDirection == "down")) {
								gameOver = true;
								break;
							}
							mittFace.y -= mittFace.height;
							break;
						case "right":
							if (mittFace.x + mittFace.width*2 > gameWidth || (snake.length > 1 && previousDirection == "left")) {
								gameOver = true;
								break;
							}
							mittFace.x += mittFace.width;
							break;
						case "down":
							if (mittFace.y + mittFace.height*2 > gameHeight || (snake.length > 1 && previousDirection == "up")) {	
								gameOver = true;
								break;
							}
							mittFace.y += mittFace.height;
							break;
						case "left":
							if (mittFace.x - mittFace.width < 0 || (snake.length > 1 && previousDirection == "right")) {	
								gameOver = true;
								break;
							}
							mittFace.x -= mittFace.width;
							break;
					}
				} else {
					gameOver = true;
				}
				
				// handle game over
				if (gameOver == true) {
					// set game over label
					if(this.currentState == "MoneyBagsState") {
						gameOverLabel.text = "Game Over!\n" + 
							"Net Worth:  $" + score + " Million\n"+
							"Click to Continue";
					}
					if(this.currentState == "BinderState" && score != 1) {
						gameOverLabel.text = "Game Over!\n" + 
						    score + " Women in Binders\n" +
							"\nClick to Continue";
					}
					if(this.currentState == "BinderState" && score == 1) {
						gameOverLabel.text = "Game Over!\n" + 
							score + " Woman in a Binder\n" +
						"\nClick to Continue";
					}
					
					// reset frame rate
					stage.frameRate = 32;
					// display game over state
					this.currentState = "GameOver";
					
					// play game over sound
					playSound();
					
					// stop looping
					mittFace.removeEventListener(Event.ENTER_FRAME, onEnterFrame, false);
					return;
				}
								
				if(snake.length > 1) {
					moveBody(initMittFaceX, initMittFaceY, 0);
				}
				
				if (mittFace.y == moneyBag.y && mittFace.x == moneyBag.x) {
					addPartToBody(initTailX, initTailY);
					moveMoney();
					// update the score label in the title bar
					score++;
					// update the score label in the title bar
					if(this.currentState == "MoneyBagsState") {
						scoreBar.text = "Net Worth: $" + score + " Million";
					}
					if(this.currentState == "BinderState" && score == 1) {
						scoreBar.text = score + " Woman in a Binder";
					}
					if(this.currentState == "BinderState" && score != 1) {
						scoreBar.text = score + " Women in Binders";
					}
				}
			}
			
			protected function moveBody(moveToX:uint, moveToY:uint, index:uint):void {
				if(index >= snake.length - 1) {
					return;
				}
				else {
					var currentX:uint = (snake.getItemAt(index+1, 0) as Image).x;
					var currentY:uint = (snake.getItemAt(index+1, 0) as Image).y;
					(snake.getItemAt(index+1, 0) as Image).x = moveToX;
					(snake.getItemAt(index+1, 0) as Image).y = moveToY;
					var imageLocArray:ArrayCollection = new ArrayCollection();
					imageLocArray.addItem(moveToX);
					imageLocArray.addItem(moveToY);
					bodyLocationArray.setItemAt(imageLocArray, index+1);
					moveBody(currentX, currentY, index + 1); 
				}
			}
			
			protected function addPartToBody(tailX:uint, tailY:uint):void {	
				playSound();
				var buffer:BitmapData = new BitmapData ( bodyPartImg.width, bodyPartImg.height, true);
				buffer.draw(bodyPartImg);
				
				var bodyPartBitmap:Bitmap = new Bitmap(buffer);
				
				var bodyPart:Image = new Image();
				bodyPart.source = bodyPartBitmap;
				
				bodyPart.cacheAsBitmapMatrix = bodyPart.transform.concatenatedMatrix;
				bodyPart.cacheAsBitmap = true;
				
				bodyPart.height = 30;
				bodyPart.width = 30;
				bodyPart.x = tailX;
				bodyPart.y = tailY;
				
				snakePit.addElement(bodyPart);
				
				snake.addItem(bodyPart);
				
				var imageLocArray:ArrayCollection = new ArrayCollection();
				imageLocArray.addItem(bodyPart.x);
				imageLocArray.addItem(bodyPart.y);
				bodyLocationArray.addItem(imageLocArray);
			}
			
			protected function getTailX():uint {
				return snake.getItemAt(snake.length-1, 0).x;
			}
			
			protected function getTailY():uint {
				return snake.getItemAt(snake.length-1, 0).y;
			}
			
			protected function moveMoney():void 
			{
				var oldBagY:int = moneyBag.y;
				var Low:int = 0;
				var HighY:int = (gameHeight - mittFace.height) / mittFace.width;
				var HighX:int = (gameWidth- mittFace.width) / mittFace.width;
//				var yLocArray:ArrayCollection = new ArrayCollection();

				
				// Collision Flag
				var collision:Boolean = false;
				
//				for each (var current:ArrayCollection in bodyLocationArray) {
//					trace("315 loop");
//					var y:Number = current.getItemAt(1) as Number;
//					yLocArray.addItem(y);
//				}
				
				do {
					moneyBag.x = Math.floor(Math.random()*(1+HighX-Low)+Low) * mittFace.width;	
					moneyBag.y = Math.floor(Math.random()*(1+HighY-Low)+Low) * mittFace.width;
					for each (var current:ArrayCollection in bodyLocationArray) {
						var x:Number = current.getItemAt(0) as Number;
						var y:Number = current.getItemAt(1) as Number;
						if(mittFace.x == x && mittFace.y == y) {
							collision = true;
							break;
						}
					}
				} while (mittFace.y == moneyBag.y || moneyBag.y == oldBagY || collision)
				
			}
			
			/* should add key listening for desktop use later */ 
			protected function reportKeyDown(event:KeyboardEvent):void {
				if(event.keyCode == Keyboard.UP) {
					previousDirection = direction;
					direction = "up";
				}
				if(event.keyCode == Keyboard.DOWN) {
					previousDirection = direction;
					direction = "down";
				}
				if(event.keyCode == Keyboard.LEFT) {
					previousDirection = direction;
					direction = "left";
				}
				if(event.keyCode == Keyboard.RIGHT) {
					previousDirection = direction;
					direction = "right";
				}
			}
			
			protected function handleSwipe(event:TransformGestureEvent):void
			{
				// if swipe to the right
				if (event.offsetX == 1)
				{
					previousDirection = direction;
					direction = "right";
				}
				// if swipe to the left
				else if (event.offsetX == -1)
				{
					previousDirection = direction;
					direction = "left";
				}
				// if swipe up
				if (event.offsetY == -1)
				{
					previousDirection = direction;
					direction = "up";
				}
				// if swipe down
				else if (event.offsetY == 1)
				{
					previousDirection = direction;
					direction = "down";
				}
			}
			
			public function playSound():void
			{
				if (this.currentState == "MoneyBagsState")
				{
					// CC Attribution license
					// http://www.freesound.org/people/Benboncan/sounds/91924/
					req = new URLRequest("assets/chaching.mp3");
				}
				else if (this.currentState == "BinderState")
				{
					// CC Attribution license
					// http://www.freesound.org/people/thanvannispen/sounds/9429/
					req = new URLRequest("assets/scream.mp3");
				} else if (this.currentState == "GameOver")
				{
					// CC Attribution license
					// http://www.freesound.org/people/AdamWeeden/sounds/157218/
					req = new URLRequest("assets/gameOver.mp3");
				}
				s = new Sound(req, context);
				s.play();
			}
			
				
		]]>
	</fx:Script>
	<s:states>
		<s:State name="MoneyBagsState"/>
		<s:State name="BinderState"/>
		<s:State name="GameOver"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<s:titleContent>
		<s:Label id="scoreBar" color="#FFFFFF" fontFamily="_sans" fontSize="22"
				 textAlign="left" verticalAlign="middle"
				 width.BinderState="100%" height.BinderState="100%"
				 fontFamily.BinderState="Courier New" fontSize.BinderState="21"
				 text.BinderState="0 Women in Binders"
				 
				 width.GameOver="100%" height.GameOver="100%" 
				 fontFamily.GameOver="Courier New" fontSize.GameOver="21" 
				 text.GameOver="Game Over"
				 
				 width.MoneyBagsState="100%" height.MoneyBagsState="100%"
				 fontFamily.MoneyBagsState="Courier New" fontSize.MoneyBagsState="21"
				 fontWeight.MoneyBagsState="normal" text.MoneyBagsState="Net Worth: $0 Million"/>
	</s:titleContent>
	
	<s:VGroup width="100%" height="100%" horizontalAlign="center" id="container">
		<s:Group id="snakePit" width="100%" height="100%"> 
			<s:SWFLoader visible="true"  id="mittFace" width="30" height="30" 
						 depth="999" source="@Embed('assets/mittChomping.swf')"/>
			<!--<s:Image id="mittFace" x="107" y="36" width="30" height="30"
					 depth="999" source="@Embed('assets/mittFace.png')"/> -->
			<s:Image id="moneyBag" width="30" height="30"
					 source.MoneyBagsState="@Embed('assets/moneyBag.png')"
					 source.BinderState="@Embed('assets/woman.png')"/>
			<s:Image id="bodyPartImg" width="100" height="100" visible="false" 
					 source.MoneyBagsState="@Embed('assets/moneyBag.png')"
					 source.BinderState="@Embed('assets/binder.png')"  />
			<s:Label id="gameOverLabel" 
					 visible="false" 
					 width.BinderState="0"
					 height.BinderState="0"
					 width.MoneyBagsState="0" 
					 height.MoneyBagsState="0"
					 backgroundColor="#393939" 
					 color="#EFEFEF" depth="1000"
					 fontFamily="Courier New" 
					 fontSize="20" 
					 textAlign="center"
					 verticalAlign="middle"
					 visible.GameOver="true" 
					 width.GameOver="100%" 
					 height.GameOver="100%"
					 click="navigator.popView();"/>
		</s:Group>
		<!--
		<s:TileGroup width="35%" horizontalAlign="center" paddingBottom="5"
					 requestedColumnCount="1" requestedRowCount="2" verticalAlign="middle">
			<s:Button id="upButton" width="70" label="Up" click="upButton_clickHandler(event)"/>
			<s:HGroup>
				<s:Button id="leftButton" width="70" label="Left"
						  click="leftButton_clickHandler(event)"/>
				<s:Button id="downButton" width="70" label="Down"
						  click="downButton_clickHandler(event)"/>
				<s:Button id="rightButton" width="70" label="Right"
						  click="rightButton_clickHandler(event)"/>
			</s:HGroup>	
		</s:TileGroup>-->
	</s:VGroup>
</s:View>
